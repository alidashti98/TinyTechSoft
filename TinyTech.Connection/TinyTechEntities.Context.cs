//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TinyTech.Connection
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TinyTechEntities : DbContext
    {
        public TinyTechEntities()
            : base(ConnectionInfo.BuildConnectionString())
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BankAccount> BankAccount { get; set; }
        public virtual DbSet<BankAccountType> BankAccountType { get; set; }
        public virtual DbSet<BankName> BankName { get; set; }
        public virtual DbSet<BuyBody> BuyBody { get; set; }
        public virtual DbSet<BuyDetail> BuyDetail { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerActivity> CustomerActivity { get; set; }
        public virtual DbSet<CustomerGroup> CustomerGroup { get; set; }
        public virtual DbSet<FiscalYear> FiscalYear { get; set; }
        public virtual DbSet<Goods> Goods { get; set; }
        public virtual DbSet<GoodsActivity> GoodsActivity { get; set; }
        public virtual DbSet<GoodsActivityType> GoodsActivityType { get; set; }
        public virtual DbSet<GoodsCode> GoodsCode { get; set; }
        public virtual DbSet<GoodsGroup> GoodsGroup { get; set; }
        public virtual DbSet<GoodsUnit> GoodsUnit { get; set; }
        public virtual DbSet<GoodsWarehouse> GoodsWarehouse { get; set; }
        public virtual DbSet<GoodsWarehouseActivity> GoodsWarehouseActivity { get; set; }
        public virtual DbSet<Path> Path { get; set; }
        public virtual DbSet<Personnel> Personnel { get; set; }
        public virtual DbSet<PersonnelActivity> PersonnelActivity { get; set; }
        public virtual DbSet<PersonnelType> PersonnelType { get; set; }
        public virtual DbSet<Province> Province { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<SailBody> SailBody { get; set; }
        public virtual DbSet<SailDetail> SailDetail { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<Warehouse> Warehouse { get; set; }
    
        public virtual int CustomerGroupDefinition(string name, Nullable<decimal> defaultSailPrice, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var defaultSailPriceParameter = defaultSailPrice.HasValue ?
                new ObjectParameter("DefaultSailPrice", defaultSailPrice) :
                new ObjectParameter("DefaultSailPrice", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerGroupDefinition", nameParameter, defaultSailPriceParameter, descriptionParameter);
        }
    
        public virtual int ProvinceDefinition(string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProvinceDefinition", nameParameter, descriptionParameter);
        }
    
        public virtual int CityDefinition(string name, Nullable<int> provinceID, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CityDefinition", nameParameter, provinceIDParameter, descriptionParameter);
        }
    }
}
